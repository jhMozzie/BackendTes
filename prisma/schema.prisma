// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int     @id @default(autoincrement())
  description String
  users       User[]
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  username   String
  password   String
  phone      String?
  birthdate  DateTime? // 👈 Nuevo campo: fecha de nacimiento opcional
  status     String    @default("Activo") // Activo | Inactivo

  roleId     Int
  role       Role      @relation(fields: [roleId], references: [id])

  academies  Academy[]
  students   Student[]
}

model Academy {
  id      Int    @id @default(autoincrement())
  name    String

  // Relación uno a muchos (una academia organiza varios campeonatos)
  userId  Int
  user    User   @relation(fields: [userId], references: [id])
  championships Championship[]

  // Relación muchos a muchos (una academia puede participar en muchos campeonatos)
  championshipLinks AcademyOnChampionships[]

  students Student[]
}

model Championship {
  id        Int                  @id @default(autoincrement())
  name      String
  startDate DateTime
  location  String

  // Relación directa: campeonato organizado por una academia
  academyId Int
  academy   Academy              @relation(fields: [academyId], references: [id])

  // Relación muchos a muchos: varias academias pueden participar
  academyLinks AcademyOnChampionships[]

  categories ChampionshipCategory[]
}

model AcademyOnChampionships {
  id              Int           @id @default(autoincrement())
  academyId       Int
  championshipId  Int

  academy         Academy       @relation(fields: [academyId], references: [id])
  championship    Championship  @relation(fields: [championshipId], references: [id])

  @@unique([academyId, championshipId])
}

model Student {
  id         Int        @id @default(autoincrement())
  firstname  String
  lastname   String
  birthdate  DateTime
  beltId     Int        // 👈 Nuevo: referencia al cinturón (kyu)
  belt       Belt       @relation(fields: [beltId], references: [id])

  userId     Int?
  user       User?       @relation(fields: [userId], references: [id])
  academyId  Int
  academy    Academy    @relation(fields: [academyId], references: [id])

  participants Participant[]
}

model ChampionshipCategory {
  id             Int       @id @default(autoincrement())
  code           String?
  modality       String    // Kata o Kumite
  gender         String    // Masculino o Femenino
  beltMinId      Int       // 👈 Nuevo: cinturón mínimo permitido
  beltMaxId      Int       // 👈 Nuevo: cinturón máximo permitido
  ageRangeId     Int       // 👈 Nuevo: rango de edad permitido
  championshipId Int

  beltMin        Belt      @relation("MinBelt", fields: [beltMinId], references: [id])
  beltMax        Belt      @relation("MaxBelt", fields: [beltMaxId], references: [id])
  ageRange       AgeRange  @relation(fields: [ageRangeId], references: [id])
  championship   Championship @relation(fields: [championshipId], references: [id])
  participants   Participant[]

  @@unique([championshipId, modality, gender, ageRangeId, beltMinId, beltMaxId])
}

model Participant {
  id                      Int  @id @default(autoincrement())
  studentId               Int
  championshipCategoryId  Int

  student              Student             @relation(fields: [studentId], references: [id])
  championshipCategory ChampionshipCategory @relation(fields: [championshipCategoryId], references: [id])

  @@unique([studentId, championshipCategoryId])
}

// =============================================
// NUEVAS TABLAS BASE PARA AUTOMATIZAR CATEGORÍAS
// =============================================

// 🥋 Cinturones / Kyu Levels
model Belt {
  id        Int       @id @default(autoincrement())
  name      String    // Blanco, Amarillo, Naranja, Verde, Azul, Marrón, Negro
  kyuLevel  Int       // 10 = Blanco ... 1 = Marrón, 0 = Negro
  students  Student[]
  minBeltCategories ChampionshipCategory[] @relation("MinBelt")
  maxBeltCategories ChampionshipCategory[] @relation("MaxBelt")
}

// 👶 Rangos Etarios (para categorías)
model AgeRange {
  id         Int      @id @default(autoincrement())
  label      String   // Ej: "8-9 años"
  minAge     Int
  maxAge     Int
  categories ChampionshipCategory[]
}