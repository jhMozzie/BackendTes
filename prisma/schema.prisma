// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int     @id @default(autoincrement())
  description String  @unique
  users       User[]
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  username   String
  password   String
  phone      String?
  birthdate  DateTime? // üëà Nuevo campo: fecha de nacimiento opcional
  status     String    @default("Activo") // Activo | Inactivo

  roleId     Int
  role       Role      @relation(fields: [roleId], references: [id])

  academies  Academy[]
  students   Student[]
}

model Academy {
  id      Int    @id @default(autoincrement())
  name    String @unique

  // Relaci√≥n uno a muchos (una academia organiza varios campeonatos)
  userId  Int
  user    User   @relation(fields: [userId], references: [id])
  championships Championship[]

  // Relaci√≥n muchos a muchos (una academia puede participar en muchos campeonatos)
  championshipLinks AcademyOnChampionships[]

  students Student[]
}

model Championship {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  startDate   DateTime
  location    String         // üèüÔ∏è Lugar o recinto (ej. "Estadio Nacional")
  district    String?        // üèôÔ∏è Distrito o ciudad (ej. "Jes√∫s Mar√≠a")
  province    String?        // üåÜ Provincia o regi√≥n (ej. "Lima")
  country     String?        // üåé Pa√≠s (ej. "Per√∫")
  description String?        // üëà A√ëADE ESTA L√çNEA (Texto opcional)
  image       String?        // üñºÔ∏è Ruta de imagen (frontend o bucket)
  status      String @default("Planificaci√≥n") // üìä Estado del campeonato

  // üîó Relaciones
  academyId   Int
  academy     Academy   @relation(fields: [academyId], references: [id])
  academyLinks AcademyOnChampionships[]
  categories  ChampionshipCategory[]
}

model AcademyOnChampionships {
  id              Int           @id @default(autoincrement())
  academyId       Int
  championshipId  Int

  academy         Academy       @relation(fields: [academyId], references: [id])
  championship    Championship  @relation(fields: [championshipId], references: [id])

  @@unique([academyId, championshipId])
}

model Student {
  id         Int        @id @default(autoincrement())
  firstname  String
  lastname   String
  birthdate  DateTime
  beltId     Int        // üëà Nuevo: referencia al cintur√≥n (kyu)
  belt       Belt       @relation(fields: [beltId], references: [id])

  userId     Int?       @unique
  user       User?       @relation(fields: [userId], references: [id])
  academyId  Int
  academy    Academy    @relation(fields: [academyId], references: [id])

  participants Participant[]
}

model ChampionshipCategory {
  id             Int       @id @default(autoincrement())
  code           String?
  modality       String    // Kata o Kumite
  gender         String    // Masculino o Femenino
  weight         String?   // üëà 1. A√ëADE ESTA L√çNEA
  beltMinId      Int       // üëà Nuevo: cintur√≥n m√≠nimo permitido
  beltMaxId      Int       // üëà Nuevo: cintur√≥n m√°ximo permitido
  ageRangeId     Int       // üëà Nuevo: rango de edad permitido
  championshipId Int

  beltMin        Belt      @relation("MinBelt", fields: [beltMinId], references: [id])
  beltMax        Belt      @relation("MaxBelt", fields: [beltMaxId], references: [id])
  ageRange       AgeRange  @relation(fields: [ageRangeId], references: [id])
  championship   Championship @relation(fields: [championshipId], references: [id])
  participants   Participant[]
  matches        Match[]      // Matches (combates) de esta categor√≠a

  // üëá 2. A√ëADE 'weight' AL FINAL DE ESTA L√çNEA
  @@unique([championshipId, modality, gender, ageRangeId, beltMinId, beltMaxId, weight])
}

model Participant {
  id                      Int  @id @default(autoincrement())
  studentId               Int
  championshipCategoryId  Int

  student              Student             @relation(fields: [studentId], references: [id])
  championshipCategory ChampionshipCategory @relation(fields: [championshipCategoryId], references: [id])

  // Relaciones inversas para los diferentes roles en Match
  winsAsWinner         Match[] @relation("Winner")
  matchesAsAkka        Match[] @relation("AkkaParticipant")
  matchesAsAo          Match[] @relation("AoParticipant")

  @@unique([studentId, championshipCategoryId])
}

// =============================================
// NUEVAS TABLAS BASE PARA AUTOMATIZAR CATEGOR√çAS
// =============================================

// ü•ã Cinturones / Kyu Levels
model Belt {
  id        Int       @id @default(autoincrement())
  name      String    @unique // Blanco, Amarillo, Naranja, Verde, Azul, Marr√≥n, Negro
  kyuLevel  Int       // 10 = Blanco ... 1 = Marr√≥n, 0 = Negro
  students  Student[]
  minBeltCategories ChampionshipCategory[] @relation("MinBelt")
  maxBeltCategories ChampionshipCategory[] @relation("MaxBelt")
}

// üë∂ Rangos Etarios (para categor√≠as)
model AgeRange {
  id         Int      @id @default(autoincrement())
  label      String   @unique // Ej: "8-9 a√±os"
  minAge     Int
  maxAge     Int
  categories ChampionshipCategory[]
}

// Fases del torneo (Ej: Round of 16, Quarter Final, Semi Final, Final)
model Phase {
  id          Int      @id @default(autoincrement())
  description String   // Ej: "Octavos de Final"
  order       Int      @unique // 1, 2, 3, ... para ordenar
  matches     Match[]
}

// ü•ã Combate/Match (Eliminaci√≥n Simple)
model Match {
  id                      Int        @id @default(autoincrement())
  championshipCategoryId  Int        // La categor√≠a a la que pertenece este bracket
  phaseId                 Int        // La fase (Octavos, Cuartos, etc.)
  matchNumber             Int        // N√∫mero del combate dentro de la fase (1, 2, 3, ...)
  status                  String     @default("Pendiente") 
  winnerId                Int?       // ID del Participant que gan√≥

  // Participantes (la inscripci√≥n del alumno en la categor√≠a)
  participantAkkaId       Int?       // Akka (Rojo). Null si es un BYE.
  participantAoId         Int?       // Ao (Azul). Null si es un BYE.

  // Puntuaci√≥n
  scoreAkka               Int?       // Puntuaci√≥n de Akka
  scoreAo                 Int?       // Puntuaci√≥n de Ao
  
  // Jerarqu√≠a del Bracket: ¬øA qu√© combate alimenta este Match?
  // El ganador de ESTE Match avanza al Match identificado por nextMatchId.
  nextMatchId             Int?       // El ID del siguiente Match
  nextMatchSide           String?    // 'Akka' o 'Ao' para indicar si el ganador es Akka o Ao en el nextMatch

  // Relaciones
  championshipCategory ChampionshipCategory @relation(fields: [championshipCategoryId], references: [id])
  phase                Phase              @relation(fields: [phaseId], references: [id])
  winner               Participant?       @relation("Winner", fields: [winnerId], references: [id])
  participantAkka      Participant?       @relation("AkkaParticipant", fields: [participantAkkaId], references: [id])
  participantAo        Participant?       @relation("AoParticipant", fields: [participantAoId], references: [id])

  // Nueva relaci√≥n jer√°rquica
  nextMatch            Match?             @relation("NextMatch", fields: [nextMatchId], references: [id], onDelete: SetNull)
  previousMatches      Match[]            @relation("NextMatch") 
  
  @@unique([championshipCategoryId, phaseId, matchNumber])
}