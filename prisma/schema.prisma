// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int     @id @default(autoincrement())
  description String
  users       User[]
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  username  String
  password  String

  // Relación con Rol (muchos a uno)
  roleId    Int
  role      Role      @relation(fields: [roleId], references: [id])

  // Relación con academias (un usuario puede ser dueño de varias academias)
  academies Academy[]

  // Un usuario (dueño) puede registrar directamente a sus alumnos
  students  Student[]
}

model Academy {
  id      Int    @id @default(autoincrement())
  name    String

  // Relación con el usuario dueño de la academia
  userId  Int
  user    User   @relation(fields: [userId], references: [id])

  // Una academia tiene muchos alumnos
  students Student[]

  // Una academia organiza varios campeonatos
  championships Championship[]
}

model Student {
  id        Int        @id @default(autoincrement())
  firstname String
  lastname  String
  birthdate DateTime

  // Relación con el usuario que lo registró
  userId    Int
  user      User       @relation(fields: [userId], references: [id])

  // Relación con la academia a la que pertenece
  academyId Int
  academy   Academy    @relation(fields: [academyId], references: [id])

  // Un alumno puede ser participante en varias categorías de campeonatos
  participants Participant[]
}

model Championship {
  id        Int                  @id @default(autoincrement())
  name      String
  startDate DateTime
  location  String

  // Relación con la academia que organiza el campeonato
  academyId Int
  academy   Academy              @relation(fields: [academyId], references: [id])

  // Un campeonato tiene muchas categorías/divisiones
  categories ChampionshipCategory[]
}

model ChampionshipCategory {
  id             Int       @id @default(autoincrement())
  code           String?   // opcional
  modality       String
  ageRange       String
  ageCategory    String
  gender         String
  skillLevel     String

  // Relación con el campeonato
  championshipId Int
  championship   Championship @relation(fields: [championshipId], references: [id])

  // Una categoría tiene muchos participantes
  participants   Participant[]

  // Evitar duplicados de categorías
  @@unique([championshipId, modality, ageRange, gender, skillLevel])
}

model Participant {
  id   Int     @id @default(autoincrement())
  studentId Int
  championshipCategoryId Int
  
  student              Student             @relation(fields: [studentId], references: [id])
  championshipCategory ChampionshipCategory @relation(fields: [championshipCategoryId], references: [id])

  // Un alumno solo puede inscribirse una vez en la misma categoría
  @@unique([studentId, championshipCategoryId])
}